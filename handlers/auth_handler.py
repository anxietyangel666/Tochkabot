from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_handler import DatabaseHandler
from config.config import DATABASE_NAME
from utils.states import *
from handlers.common_handler import start
import logging
from datetime import datetime
from dateutil.relativedelta import relativedelta
import calendar

logger = logging.getLogger('TelegramBot')

ADMIN_SECRET_CODE = "748596"

POSITIONS = {
    "1": "–ö–∞—Å—Å–∏—Ä –¢–æ—Ä–≥–æ–≤–æ–≥–æ –ó–∞–ª–∞",
    "2": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "3": "–ö–†–û",
    "4": "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä",
    "5": "–°–ª—É–∂–±–∞ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
}

class AuthHandler:
    def __init__(self):
        self.db = DatabaseHandler(DATABASE_NAME)
        logger.info("AuthHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def calculate_experience(self, hire_date_str: str) -> str:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞–∂–∞ —Ä–∞–±–æ—Ç—ã"""
        if not hire_date_str:
            return "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        try:
            hire_date = datetime.strptime(hire_date_str, '%d.%m.%Y')
            today = datetime.now()
            diff = relativedelta(today, hire_date)
            
            years = diff.years
            months = diff.months
            
            if years > 0:
                if months > 0:
                    return f"{years} –≥. {months} –º–µ—Å."
                return f"{years} –≥."
            elif months > 0:
                return f"{months} –º–µ—Å."
            else:
                return "–ú–µ–Ω–µ–µ –º–µ—Å—è—Ü–∞"
        except ValueError:
            return "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã"

    async def format_profile_info(self, user_data, user_id):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        full_name, barcode, hire_date, position, is_admin, work_store_id, store_address = user_data
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö
        profile_text = [
            f"–í–∞—à–µ –§–ò–û: {full_name}",
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}",
            f"–í–∞—à —à—Ç—Ä–∏—Ö-–∫–æ–¥: {barcode}"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
        if position in ["–ö–∞—Å—Å–∏—Ä –¢–æ—Ä–≥–æ–≤–æ–≥–æ –ó–∞–ª–∞", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]:
            store_text = store_address if store_address else "–ù–µ —É–∫–∞–∑–∞–Ω"
            profile_text.append(f"–ú–∞–≥–∞–∑–∏–Ω: {store_text}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å—Ç–∞–∂–µ
        if hire_date:
            profile_text.append(f"–î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {hire_date}")
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–∞ —Ä–∞–±–æ—Ç—ã
            hire_datetime = datetime.strptime(hire_date, '%d.%m.%Y')
            experience = relativedelta(datetime.now(), hire_datetime)
            experience_text = f"{experience.years} –≥. {experience.months} –º–µ—Å."
            profile_text.append(f"–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã: {experience_text}")
        else:
            profile_text.extend([
                "–î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞",
                "–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã: –î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if position == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
            admin_stores = self.db.get_admin_stores(user_id)
            if admin_stores:
                stores_text = ", ".join([store[2] for store in admin_stores])
                profile_text.append(f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã: {stores_text}")
            else:
                profile_text.append("–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã")
        
        return "\n".join(profile_text)

    async def show_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = context.user_data.get('user_id')
        user_data = self.db.get_user_data(user_id)
        
        if not user_data:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return LOGIN

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ user_data
        full_name, barcode, hire_date, position, is_admin, work_store_id, store_address = user_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = [
            ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å']
        ]

        # –°—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞—Ñ–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
        if position not in ['–ö–†–û', '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä', '–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏']:
            keyboard.append(['üìÖ –ì—Ä–∞—Ñ–∏–∫'])

        # –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if position == '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä' or is_admin:
            keyboard.append(['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'])
        elif not is_admin:
            keyboard.append(['üîê –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞'])
        
        keyboard.append(['üö™ –í—ã–π—Ç–∏'])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = await self.format_profile_info(user_data, user_id)
        
        await update.message.reply_text(
            profile_text,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return MENU

    async def show_edit_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        user_id = context.user_data.get('user_id')
        user_data = self.db.get_user_data(user_id)
        
        if not user_data:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return await self.show_menu(update, context)

        _, _, _, position, _, _, _ = user_data
        
        keyboard = [
            ['üìù –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û'],
            ['üî¢ –ò–∑–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥'],
            ['üìÖ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞']
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
        if position not in ['–ö–†–û', '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä', '–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏']:
            keyboard.append(['üè™ –í—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω'])
        
        keyboard.append(['‚Ü©Ô∏è –ù–∞–∑–∞–¥'])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:',
            reply_markup=reply_markup
        )
        return EDIT_CHOICE


    async def edit_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
        reply_keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        return EDIT_NAME

    async def save_new_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_edit_menu(update, context)

        new_name = update.message.text
        user_id = context.user_data.get('user_id')
        self.db.update_user_name(user_id, new_name)
        
        return await self.show_menu(update, context)

    async def edit_barcode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞"""
        reply_keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à—Ç—Ä–∏—Ö-–∫–æ–¥:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        return EDIT_BARCODE

    async def save_new_barcode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —à—Ç—Ä–∏—Ö-–∫–æ–¥"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_edit_menu(update, context)

        new_barcode = update.message.text
        user_id = context.user_data.get('user_id')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        existing_user = self.db.get_user_by_barcode(new_barcode)
        if existing_user and existing_user[0] != user_id:
            await update.message.reply_text('–≠—Ç–æ—Ç —à—Ç—Ä–∏—Ö-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–µ—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!')
            return await self.edit_barcode(update, context)

        self.db.update_user_barcode(user_id, new_barcode)
        return await self.show_menu(update, context)

    async def register(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.debug(f"–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        reply_keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return FULL_NAME

    async def get_full_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –§–ò–û: {update.message.text}")
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await start(update, context)
            
        context.user_data['full_name'] = update.message.text
        reply_keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            '–¢–µ–ø–µ—Ä—å –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∏–ª–∏ –≤–≤–µ–¥—Ç–µ –≤–∞—à —à—Ç—Ä–∏—Ö-–∫–æ–¥:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        return BARCODE

    async def get_barcode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.register(update, context)
        
        barcode = update.message.text
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω —à—Ç—Ä–∏—Ö-–∫–æ–¥: {barcode}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –≤ –±–∞–∑–µ
        existing_user = self.db.get_user_by_barcode(barcode)
        if existing_user:
            reply_keyboard = [['üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è']]
            await update.message.reply_text(
                '–≠—Ç–æ—Ç —à—Ç—Ä–∏—Ö-–∫–æ–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —à—Ç—Ä–∏—Ö-–∫–æ–¥ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.',
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
            )
            return LOGIN

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['barcode'] = barcode
        return await self.show_stores_list(update, context)

    async def authorize(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        reply_keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —à—Ç—Ä–∏—Ö-–∫–æ–¥:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return BARCODE_AUTH  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    async def check_auth_barcode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ç—Ä–∏—Ö-–∫–æ–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.authorize(update, context)
        
        barcode = update.message.text
        user_data = self.db.get_user_by_barcode(barcode)
        
        if not user_data:
            await update.message.reply_text(
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:'
            )
            return BARCODE_AUTH
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_id = user_data[0]
        context.user_data['user_id'] = user_id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        full_user_data = self.db.get_user_data(user_id)
        if full_user_data:
            _, _, _, position, is_admin, _, _ = full_user_data
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–∞—Ç–µ–ª—å –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            if position == '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä':
                self.db.set_admin_status(user_id, True)
        
        return await self.show_menu(update, context)

    async def edit_hire_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        reply_keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2023',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        return EDIT_HIRE_DATE

    async def save_hire_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_edit_menu(update, context)

        hire_date = update.message.text
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            datetime.strptime(hire_date, '%d.%m.%Y')
            
            user_id = context.user_data.get('user_id')
            self.db.update_hire_date(user_id, hire_date)
            
            return await self.show_menu(update, context)
        except ValueError:
            await update.message.reply_text(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n'
                '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2023'
            )
            return EDIT_HIRE_DATE

    async def request_admin_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
        reply_keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä—Ç–æ—Ä–∞:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        return ADMIN_CODE

    async def check_admin_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_menu(update, context)
            
        if update.message.text == ADMIN_SECRET_CODE:
            user_id = context.user_data.get('user_id')
            self.db.set_admin_status(user_id, True)
            
            await update.message.reply_text(
                'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ–∞!'
            )
            return await self.show_menu(update, context)
        else:
            await update.message.reply_text(
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.',
                reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∑–¥']], one_time_keyboard=True)
            )
            return ADMIN_CODE

    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        keyboard = [
            ['üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏'],
            ['üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏'],
            ['üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏'],
            ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:',
            reply_markup=reply_markup
        )
        return ADMIN_MENU

    async def show_users_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_menu(update, context)

        users = self.db.get_all_users()
        users_list = ""
        for i, user in enumerate(users, 1):
            users_list += f"{i}. {user[1]} ({user[5]})\n"

        await update.message.reply_text(
            f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n{users_list}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        context.user_data['users_list'] = users
        return SELECT_USER

    async def handle_user_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_admin_panel(update, context)

        try:
            selected_index = int(update.message.text) - 1
            users_list = context.user_data.get('users_list', [])
            
            if 0 <= selected_index < len(users_list):
                selected_user = users_list[selected_index]
                context.user_data['selected_user_id'] = selected_user[0]
                return await self.show_user_management(update, context)
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return SELECT_USER
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return SELECT_USER

    async def handle_position_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_users_list(update, context)

        position_number = update.message.text
        if position_number in POSITIONS:
            user_id = context.user_data['selected_user_id']
            new_position = POSITIONS[position_number]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–≤—Å–µ –ø—Ä–∞–≤–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞)
            self.db.update_user_position(user_id, new_position)
            
            await update.message.reply_text(
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {new_position}"
            )
            
            return await self.show_users_list(update, context)
        else:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:"
                "\n1 - –ö–∞—Å—Å–∏—Ä –¢–æ—Ä–≥–æ–≤–æ–≥–æ –ó–∞–ª–∞"
                "\n2 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                "\n3 - –ö–†–û"
                "\n4 - –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
                "\n5 - –°–ª—É–∂–±–∞ –ë–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            )
            return SELECT_POSITION

    async def start_add_store(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:',
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return STORE_ADDRESS

    async def get_store_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await start(update, context)
        
        address = update.message.text
        store_id = self.db.add_store(address)
        
        if store_id:
            store = self.db.get_store_by_id(store_id)
            employees_count = self.db.get_store_employees_count(store_id)
            
            profile_text = (
                f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üè™ –ü—Ä–æ—Ñ–∏–ª—å –º–∞–≥–∞–∑–∏–Ω–∞:\n"
                f"ID: {store[0]}\n"
                f"–ù–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞: {store[1]}\n"
                f"–ê–¥—Ä–µ—Å: {store[2]}\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employees_count}"
            )
            
            await update.message.reply_text(
                profile_text,
                reply_markup=ReplyKeyboardMarkup([['Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
            )
            return LOGIN
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return await start(update, context)

    async def show_administrators(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        admins = self.db.get_administrators()
        admins_list = ""
        for i, admin in enumerate(admins, 1):
            admin_id, name = admin
            stores = self.db.get_admin_stores(admin_id)
            stores_text = ", ".join([store[1] for store in stores]) if stores else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã"
            admins_list += f"{i}. {name} (–ú–∞–≥–∞–∑–∏–Ω—ã: {stores_text})\n"

        await update.message.reply_text(
            f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞–æ—Ä–æ–≤:\n\n{admins_list}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
        context.user_data['admins_list'] = admins
        return SELECT_ADMIN

    async def handle_admin_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_admin_panel(update, context)

        try:
            selected_index = int(update.message.text) - 1
            admins_list = context.user_data.get('admins_list', [])
            
            if 0 <= selected_index < len(admins_list):
                selected_admin = admins_list[selected_index]
                context.user_data['selected_admin_id'] = selected_admin[0]
                
                keyboard = [['üè™ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã'], ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
                await update.message.reply_text(
                    f"–í—ã–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {selected_admin[1]}\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
                return ASSIGN_STORES
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return SELECT_ADMIN
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return SELECT_ADMIN

    async def show_stores_for_assignment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è"""
        stores = self.db.get_all_stores()
        stores_list = "\n".join([f"{store[0]}. {store[2]}" for store in stores])
        
        await update.message.reply_text(
            f"–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:\n\n{stores_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5):"
        )
        return ASSIGN_STORES

    async def handle_store_assignment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_administrators(update, context)

        try:
            store_ids = [int(x.strip()) for x in update.message.text.split(',')]
            admin_id = context.user_data['selected_admin_id']
            
            self.db.assign_stores_to_admin(admin_id, store_ids)
            await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
            return await self.show_admin_panel(update, context)
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5)"
            )

    async def show_stores_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
        stores = self.db.get_all_stores()
        
        if not stores:
            # –ï—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
            return await self.handle_store_selection(update, context)
        
        stores_list = "\n".join([f"{store[0]}. {store[2]}" for store in stores])
        keyboard = [['‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'], ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n{stores_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return SELECT_STORE

    async def handle_store_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
        if update and update.message and update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_stores_list(update, context)
        
        store_id = None
        store = None
        
        if update and update.message and update.message.text != '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            try:
                store_id = int(update.message.text)
                store = self.db.get_store_by_id(store_id)
                if not store:
                    await update.message.reply_text(
                        "–ú–∞–∞–∑–∏–Ω —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return SELECT_STORE
            except ValueError:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏."
                )
                return SELECT_STORE

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_id = context.user_data.get('user_id')
        if user_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.update_user_store(user_id, store_id)
            return await self.show_menu(update, context)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
            full_name = context.user_data.get('full_name')
            barcode = context.user_data.get('barcode')
            
            user_id = self.db.add_user(
                telegram_id=update.message.from_user.id,
                full_name=full_name,
                barcode=barcode,
                work_store_id=store_id
            )
            
            context.user_data['user_id'] = user_id
            
            store_text = store[2] if store else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            reply_keyboard = [['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'], ['üîê –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞'], ['üö™ –í—ã–π—Ç–∏']]
            await update.message.reply_text(
                f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n'
                f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n'
                f'–í–∞—à–µ –§–ò–û: {full_name}\n'
                f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: –ö–∞—Å—Å–∏—Ä –¢–æ—Ä–≥–æ–≤–æ–≥–æ –ó–∞–ª–∞\n'
                f'–ú–∞–≥–∞–∑–∏–Ω: {store_text}\n'
                f'–í–∞—à —à—Ç—Ä–∏—Ö-–∫–æ–¥: {barcode}\n'
                f'–î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞\n'
                f'–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã: –î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –∫–∞–∑–∞–Ω–∞',
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
            )
            return MENU

    async def show_stores_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞–º–∏"""
        keyboard = [
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω'],
            ['‚ùå –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω'],
            ['üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞'],
            ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏:',
            reply_markup=reply_markup
        )
        return STORES_MENU

    async def delete_store_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        stores = self.db.get_all_stores()
        if not stores:
            await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
            return await self.show_stores_menu(update, context)

        stores_list = "\n".join([f"{store[0]}. {store[1]}" for store in stores])
        keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            f"–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:\n\n{stores_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —É–¥–ª–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return DELETE_STORE

    async def handle_store_deletion(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_stores_menu(update, context)

        try:
            store_id = int(update.message.text)
            store = self.db.get_store_by_id(store_id)
            if store:
                self.db.delete_store(store_id)
                await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            else:
                await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return await self.show_stores_menu(update, context)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")
            return DELETE_STORE

    async def show_store_employees(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        stores = self.db.get_all_stores()
        if not stores:
            await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
            return await self.show_stores_menu(update, context)

        stores_list = "\n".join([f"{store[0]}. {store[2]}" for store in stores])
        keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n{stores_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return SELECT_STORE_EMPLOYEES

    async def show_employees_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_stores_menu(update, context)

        try:
            store_id = int(update.message.text)
            store = self.db.get_store_by_id(store_id)
            if not store:
                await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return await self.show_stores_menu(update, context)

            employees = self.db.get_store_employees(store_id)
            if not employees:
                await update.message.reply_text(f"–í –º–∞–∞–∑–∏–Ω–µ {store[1]} –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
                return await self.show_stores_menu(update, context)

            context.user_data['selected_store_id'] = store_id
            context.user_data['store_employees'] = employees

            employees_list = "\n".join([f"{i+1}. {emp[1]} ({emp[2]})" for i, emp in enumerate(employees)])
            keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
            await update.message.reply_text(
                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {store[1]}:\n\n{employees_list}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return SELECT_EMPLOYEE
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")
            return SELECT_STORE_EMPLOYEES

    async def handle_employee_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_store_employees(update, context)

        try:
            employees = context.user_data.get('store_employees', [])
            selected_index = int(update.message.text) - 1

            if 0 <= selected_index < len(employees):
                employee = employees[selected_index]
                context.user_data['selected_employee_id'] = employee[0]

                keyboard = [
                    ['‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'],
                    ['üè™ –£–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω'],
                    ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']
                ]
                await update.message.reply_text(
                    f"–í—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee[1]}\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
                return EMPLOYEE_ACTIONS
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
                return SELECT_EMPLOYEE
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")
            return SELECT_EMPLOYEE

    async def delete_employee(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_employees_list(update, context)

        employee_id = context.user_data.get('selected_employee_id')
        if not employee_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return await self.show_stores_menu(update, context)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –ø–µ—Ä–µ —É–¥–∞–ª–µ–Ω–∏–µ–º
        employee = self.db.get_user_data(employee_id)
        if employee:
            # –û–±–Ω—É–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            self.db.update_user_store(employee_id, None)
            await update.message.reply_text(
                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee[0]} —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞–≥–∞–∑–Ω–∞."
            )
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        return await self.show_stores_menu(update, context)

    async def reassign_employee_store(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–º–µ–Ω–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.handle_employee_selection(update, context)

        try:
            store_id = int(update.message.text)
            employee_id = context.user_data.get('selected_employee_id')
            
            if not employee_id:
                await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                return await self.show_stores_menu(update, context)

            store = self.db.get_store_by_id(store_id)
            if not store:
                await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return SELECT_STORE

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω —Å–æ—Ç—Ä—É–¥–∏–∫–∞
            self.db.update_user_store(employee_id, store_id)
            await update.message.reply_text(
                f"–ú–∞–≥–∞–∑–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {store[1]}"
            )
            return await self.show_stores_menu(update, context)

        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏."
            )
            return SELECT_STORE

    async def request_admin_rights(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return await self.request_admin_code(update, context)

    async def show_stores_for_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        stores = self.db.get_all_stores()
        
        if not stores:
            await update.message.reply_text("–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
            return await self.show_edit_menu(update, context)
        
        stores_list = "\n".join([f"{store[0]}. {store[2]}" for store in stores])
        keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n{stores_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return EDIT_STORE

    async def handle_store_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_edit_menu(update, context)

        try:
            store_id = int(update.message.text)
            store = self.db.get_store_by_id(store_id)
            if not store:
                await update.message.reply_text(
                    "–ú–∞–≥–∞–∑–∏–Ω —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_STORE

            user_id = context.user_data.get('user_id')
            self.db.update_user_store(user_id, store_id)
            return await self.show_menu(update, context)

        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏."
            )
            return EDIT_STORE

    async def edit_store(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        stores = self.db.get_all_stores()
        
        if not stores:
            await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
            return await self.show_edit_menu(update, context)
        
        stores_list = "\n".join([f"{store[0]}. {store[2]}" for store in stores])
        keyboard = [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
        
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n{stores_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return EDIT_STORE

    async def handle_store_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_edit_menu(update, context)

        try:
            store_id = int(update.message.text)
            store = self.db.get_store_by_id(store_id)
            if not store:
                await update.message.reply_text(
                    "–ú–∞–≥–∞–∑–∏–Ω —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_STORE

            user_id = context.user_data.get('user_id')
            self.db.update_user_store(user_id, store_id)
            return await self.show_menu(update, context)

        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏."
            )
            return EDIT_STORE

    async def show_user_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º"""
        keyboard = [
            ['üëî –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å'],
            ['üè™ –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω'],
            ['‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞'],
            ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']
        ]
        
        user_id = context.user_data.get('selected_user_id')
        user_data = self.db.get_user_data(user_id)
        
        if not user_data:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return await self.show_admin_panel(update, context)
        
        _, _, _, position, is_admin, _, _ = user_data
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤
        if not is_admin:
            keyboard.pop(2)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return USER_MANAGEMENT

    async def show_position_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥–ª–∂–Ω–æ—Å—Ç–∏"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_user_management(update, context)
        
        positions_text = "\n".join([f"{k}. {v}" for k, v in POSITIONS.items()])
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:\n\n" + positions_text,
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return SELECT_POSITION

    async def show_store_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_user_management(update, context)
        
        stores = self.db.get_all_stores()
        if not stores:
            await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤")
            return await self.show_user_management(update, context)
        
        stores_list = "\n".join([f"{store[0]}. {store[2]}" for store in stores])
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n{stores_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return SELECT_STORE

    async def remove_admin_rights(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_user_management(update, context)
        
        user_id = context.user_data.get('selected_user_id')
        user_data = self.db.get_user_data(user_id)
        
        if not user_data:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return await self.show_admin_panel(update, context)
        
        _, _, _, position, is_admin, _, _ = user_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if position == '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä':
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n"
                "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            )
            return await self.show_user_management(update, context)
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        self.db.set_admin_status(user_id, False)
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        return await self.show_user_management(update, context)

    async def start_store_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ ID –º–∞–≥–∞–∑–∏–Ω–∞:',
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return STORE_AUTH

    async def handle_store_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await start(update, context)
        
        try:
            store_id = int(update.message.text)
            store = self.db.get_store_by_id(store_id)
            
            if not store:
                await update.message.reply_text(
                    "‚ùå –ú–∞–≥–∞–∑–∏–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return STORE_AUTH
            
            store_id, store_number, address = store
            employees_count = self.db.get_store_employees_count(store_id)
            
            profile_text = (
                f"üè™ –ü—Ä–æ—Ñ–∏–ªÔøΩÔøΩ –º–∞–≥–∞–∑–∏–Ω–∞:\n"
                f"ID: {store_id}\n"
                f"–ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞: {store_number}\n"
                f"–ê–¥—Ä–µ—Å: {address}\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employees_count}"
            )
            
            await update.message.reply_text(
                profile_text,
                reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
            )
            return LOGIN
            
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –º–∞–≥–∞–∑–∏–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏."
            )
            return STORE_AUTH

    async def show_schedule_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–∞"""
        keyboard = [
            ['üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫'],
            ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫'],
            ['‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫'],
            ['üîÑ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–º–µ–Ω—É'],
            ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–º–µ–Ω—É'],
            ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']
        ]
        await update.message.reply_text(
            '–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º:',
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return SCHEDULE_MENU

    async def view_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_schedule_menu(update, context)
        
        user_id = context.user_data.get('user_id')
        user_data = self.db.get_user_data(user_id)
        
        if not user_data:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return await self.show_menu(update, context)
        
        full_name, _, _, position, _, work_store_id, _ = user_data
        current_month = datetime.now().strftime('%Y-%m')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        schedule_text = f"üìÖ –ì—Ä–∞—Ñ–∏–∫ {full_name} –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n\n"
        schedule = self.db.get_schedule(user_id, work_store_id, current_month)
        
        if schedule:
            schedule_data = schedule
            for i, day in enumerate(schedule_data, 1):
                schedule_text += f"{i:02d}: {'–°–º–µ–Ω–∞' if day == '–°' else '–í—ã—Ö–æ–¥–Ω–æ–π'}\n"
        else:
            schedule_text += "–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        substitutions = self.db.get_user_substitutions(user_id, datetime.now())
        if substitutions:
            schedule_text += "\nüîÑ –ü–æ–¥–º–µ–Ω—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n"
            for date, hours, store in substitutions:
                schedule_text += f"üìÖ {date}: {hours}—á –≤ {store}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–≥ –∏–∑ —Ç–æ–≥–æ –∂–µ –º–∞–≥–∞–∑–∏–Ω–∞
        colleagues = self.db.get_store_employees(work_store_id)
        colleagues_text = ""
        
        if colleagues:
            for colleague_id, colleague_name, colleague_position in colleagues:
                if colleague_id != user_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    colleagues_text += f"\n\nüë§ {colleague_name} ({colleague_position}):\n"
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–ª–µ–≥–∏
                    colleague_schedule = self.db.get_schedule(colleague_id, work_store_id, current_month)
                    if colleague_schedule:
                        colleagues_text += "üìÖ –ì—Ä–∞—Ñ–∏–∫:\n"
                        for i, day in enumerate(colleague_schedule, 1):
                            colleagues_text += f"{i:02d}: {'–°–º–µ–Ω–∞' if day == '–°' else '–í—ã—Ö–æ–¥–Ω–æ–π'}\n"
                    else:
                        colleagues_text += "–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                    
                    # –ü–æ–¥–º–µ–Ω—ã –∫–æ–ª–ª–µ–≥–∏
                    colleague_substitutions = self.db.get_user_substitutions(colleague_id, datetime.now())
                    if colleague_substitutions:
                        colleagues_text += "\nüîÑ –ü–æ–¥–º–µ–Ω—ã:\n"
                        for date, hours, store in colleague_substitutions:
                            colleagues_text += f"üìÖ {date}: {hours}—á –≤ {store}\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
        full_text = schedule_text
        if colleagues_text:
            full_text += "\n\nüìã –ì—Ä–∞—Ñ–∏–∫–∏ –∫–æ–ª–ª–µ–≥:" + colleagues_text
        else:
            full_text += "\n\n–í —ç—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(full_text) > 4096:
            for x in range(0, len(full_text), 4096):
                await update.message.reply_text(
                    full_text[x:x+4096],
                    reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
                )
        else:
            await update.message.reply_text(
                full_text,
                reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
            )
        return SCHEDULE_MENU

    async def create_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_schedule_menu(update, context)

        current_month = datetime.now()
        days_in_month = calendar.monthrange(current_month.year, current_month.month)[1]
        
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ {current_month.strftime('%B %Y')} "
            f"(–≤—Å–µ–≥–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ: {days_in_month})\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
            "–ü—Ä–∏–º–µ—Ä: 1,2,3,7,8,9,13,14,15\n"
            "–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –±—É–¥—É—Ç –≤—ã—Ö–æ–¥–Ω—ã–º–∏",
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return CREATE_SCHEDULE

    async def save_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_schedule_menu(update, context)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
            work_days = [int(day.strip()) for day in update.message.text.split(',')]
            
            current_month = datetime.now()
            days_in_month = calendar.monthrange(current_month.year, current_month.month)[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π
            if not all(1 <= day <= days_in_month for day in work_days):
                await update.message.reply_text(
                    f"–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ {days_in_month}"
                )
                return CREATE_SCHEDULE
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫: –í - –≤—ã—Ö–æ–¥–Ω–æ–π, –° - —Å–º–µ–Ω–∞
            schedule_data = ['–í'] * days_in_month
            for day in work_days:
                schedule_data[day - 1] = '–°'
            
            schedule_string = ''.join(schedule_data)
            current_month_str = datetime.now().strftime('%Y-%m')
            user_id = context.user_data.get('user_id')
            user_data = self.db.get_user_data(user_id)
            
            if not user_data:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return await self.show_menu(update, context)

            _, _, _, _, _, work_store_id, _ = user_data
            
            self.db.save_schedule(user_id, work_store_id, current_month_str, schedule_string)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_schedule = "\n".join(
                f"{i+1}: {'–°–º–µ–Ω–∞' if day == '–°' else '–í—ã—Ö–æ–¥–Ω–æ–π'}"
                for i, day in enumerate(schedule_data)
            )
            
            await update.message.reply_text(
                f"–ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ {current_month.strftime('%B %Y')}:\n"
                f"{formatted_schedule}"
            )
            return await self.show_schedule_menu(update, context)
            
        except ValueError:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3,7,8,9)"
            )
            return CREATE_SCHEDULE

    async def edit_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_schedule_menu(update, context)

        current_month = datetime.now()
        days_in_month = calendar.monthrange(current_month.year, current_month.month)[1]
        
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ {current_month.strftime('%B %Y')} "
            f"({days_in_month} –¥–Ω–µ–π)\n"
            "–§–æ—Ä–º–∞—Ç: –°-–í-–°-–í... (–° - —Å–º–µ–Ω–∞, –í - –≤—ã—Ö–æ–¥–Ω–æ–π)\n"
            "–ü—Ä–∏–º–µ—Ä: –°–°–°–í–í–°–°–°–í–í–°–°–í...",
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return EDIT_SCHEDULE

    async def start_add_substitution(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–º–µ–Ω—ã"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_schedule_menu(update, context)
        
        stores = self.db.get_all_stores()
        if not stores:
            await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤")
            return await self.show_schedule_menu(update, context)
        
        stores_list = "\n".join([f"{store[0]}. {store[1]} ({store[2]})" for store in stores])
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–¥–º–µ–Ω—ã:\n\n{stores_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return ADD_SUBSTITUTION_STORE

    async def handle_substitution_store(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–¥–º–µ–Ω—ã"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_schedule_menu(update, context)
        
        try:
            store_id = int(update.message.text)
            store = self.db.get_store_by_id(store_id)
            
            if not store:
                await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return ADD_SUBSTITUTION_STORE
            
            context.user_data['sub_store_id'] = store_id
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–¥–º–µ–Ω—ã (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):",
                reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
            )
            return ADD_SUBSTITUTION_DATE
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞")
            return ADD_SUBSTITUTION_STORE

    async def handle_substitution_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–æ–¥–º–µ–Ω—ã"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.start_add_substitution(update, context)
        
        try:
            date = datetime.strptime(update.message.text, '%d.%m.%Y')
            context.user_data['sub_date'] = date.strftime('%Y-%m-%d')
            
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:",
                reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
            )
            return ADD_SUBSTITUTION_HOURS
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return ADD_SUBSTITUTION_DATE

    async def handle_substitution_hours(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –ø–æ–¥–º–µ–Ω—ã"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.handle_substitution_store(update, context)
        
        try:
            hours = int(update.message.text)
            if hours <= 0 or hours > 24:
                await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 24")
                return ADD_SUBSTITUTION_HOURS
            
            user_id = context.user_data.get('user_id')
            
            if context.user_data.get('editing_sub'):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–º–µ–Ω—É
                old_date = context.user_data.get('old_sub_date')
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π store_id –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–º–µ–Ω—ã
                substitutions = context.user_data.get('substitutions', [])
                selected_index = int(context.user_data.get('selected_sub_index', 0))
                _, _, store = substitutions[selected_index]
                store_id = self.db.get_store_id_by_address(store)
                
                self.db.update_substitution(user_id, old_date, store_id, old_date, hours)
                await update.message.reply_text("‚úÖ –ü–æ–¥–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–º–µ–Ω—É
                store_id = context.user_data.get('sub_store_id')
                date = context.user_data.get('sub_date')
                self.db.save_substitution(user_id, store_id, date, hours)
                await update.message.reply_text("‚úÖ –ü–æ–¥–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('editing_sub', None)
            context.user_data.pop('old_sub_date', None)
            context.user_data.pop('selected_sub_index', None)
            
            return await self.show_schedule_menu(update, context)
            
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24")
            return ADD_SUBSTITUTION_HOURS

    async def edit_substitution_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–º–µ–Ω—ã"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_schedule_menu(update, context)

        keyboard = [
            ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–º–µ–Ω—É'],
            ['‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–º–µ–Ω—É'],
            ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']
        ]
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return EDIT_SUBSTITUTION

    async def handle_substitution_edit_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥–º–µ–Ω–æ–π"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_schedule_menu(update, context)

        user_id = context.user_data.get('user_id')
        substitutions = self.db.get_user_substitutions(user_id, datetime.now())

        if not substitutions:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–º–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ.",
                reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
            )
            return EDIT_SUBSTITUTION

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–º–µ–Ω —Å –Ω–æ–º–µ—Ä–∞–º–∏
        substitutions_text = "–í–∞—à–∏ –ø–æ–¥–º–µ–Ω—ã:\n\n"
        context.user_data['substitutions'] = substitutions  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–º–µ–Ω
        for i, (date, hours, store) in enumerate(substitutions, 1):
            substitutions_text += f"{i}. {date}: {hours}—á –≤ {store}\n"

        await update.message.reply_text(
            f"{substitutions_text}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥–º–µ–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ)
        context.user_data['sub_action'] = 'edit' if update.message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–º–µ–Ω—É' else 'delete'
        return SELECT_SUBSTITUTION_DATE

    async def handle_substitution_date_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–º–µ–Ω—ã"""
        if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.edit_substitution_menu(update, context)

        try:
            selected_index = int(update.message.text) - 1
            substitutions = context.user_data.get('substitutions', [])
            
            if not (0 <= selected_index < len(substitutions)):
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
                )
                return SELECT_SUBSTITUTION_DATE

            date, hours, store = substitutions[selected_index]
            action = context.user_data.get('sub_action')
            user_id = context.user_data.get('user_id')

            if action == 'delete':
                self.db.delete_substitution(user_id, date)
                await update.message.reply_text("‚úÖ –ü–æ–¥–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                return await self.show_schedule_menu(update, context)
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–º–µ–Ω—ã
                context.user_data['selected_sub_index'] = selected_index
                context.user_data['old_sub_date'] = date
                context.user_data['editing_sub'] = True
                await update.message.reply_text(
                    f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {hours}\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–æ—Ç 1 –¥–æ 24):",
                    reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
                )
                return ADD_SUBSTITUTION_HOURS

        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥–º–µ–Ω—ã —Ü–∏—Ñ—Ä–æ–π",
                reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
            )
            return SELECT_SUBSTITUTION_DATE
